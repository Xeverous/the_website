8pp_direct 0pp_header
8pp_direct 0pp_header

keyword type
{
keyword:
	keyword var_member = num;
	keyword var_member = num;

	keyword keyword func(keyword param)
	{
		keyword (param == num)
			keyword num;
		keyword
			keyword param;
	}

keyword:
	func(keyword param = num, keyword param = num)
	: var_member(param)
	, var_member(func(param))
	{}

	keyword func() keyword { keyword var_member; }
	keyword func() keyword { keyword var_member; }
};

keyword keyword2func(type param, type param)
{
	keyword (param.func() == param.func())
		keyword param.func() == param.func();

	0com_single
	0com_single
	keyword param.func() * param.func() == param.func() * param.func();
}

keyword keyword2func(type param, type param)
{
	keyword !(param 2oo param);
}

keyword keyword1func(type param, type param)
{
	keyword (param.func() == param.func())
	{
		0com_single
		keyword (param.func() > num) 0com_single
			keyword param.func() < param.func();
		keyword 0com_single
			keyword param.func() < param.func();
	}

	0com_single
	keyword ((param.func() > num) == (param.func() > num))
		keyword param.func() * param.func() < param.func() * param.func();
	keyword
		keyword param.func() * param.func() < param.func() * param.func();
}

keyword keyword1func (type param, type param) { keyword param 1oo param; }
keyword keyword2func(type param, type param) { keyword !(param 1oo param); }
keyword keyword2func(type param, type param) { keyword !(param 1oo param); }

keyword func()
{
	macro_ref(type(num, num) 2oo type(num, num));
	macro_ref(type(num, num) 2oo type(-num, num));
	macro_ref(type(num, num) 2oo type(num, -num));
	macro_ref(type(num, num) 2oo type(-num, -num));

	macro_ref(type(num, num) 2oo type(num, num));

	macro_ref(type(num, num) 1oo type(num, num));
	macro_ref(type(num, num) 1oo type(-num, num));
	macro_ref(type(num, num) 1oo type(num, -num));
	macro_ref(type(num, num) 1oo type(-num, -num));
}
