type& keyword2func(type& param, type param)
{
	keyword param = keyword<type>(keyword<keyword>(param) & keyword<keyword>(param));
}

type& keyword2func(type& param, type param)
{
	keyword param = keyword<type>(keyword<keyword>(param) | keyword<keyword>(param));
}

type& keyword2func(type& param, type param)
{
	keyword param = keyword<type>(keyword<keyword>(param) ^ keyword<keyword>(param));
}

type keyword1func(type param, type param) { keyword param 2oo param; }
type keyword1func(type param, type param) { keyword param 2oo param; }
type keyword1func(type param, type param) { keyword param 2oo param; }

type keyword1func(type param)
{
	0com_single
	keyword keyword<type>(~keyword<keyword>(param));
}
