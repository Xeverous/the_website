type& keyword&=(type& param, type param)
{
	keyword param = keyword<type>(keyword<keyword>(param) & keyword<keyword>(param));
}

type& keyword|=(type& param, type param)
{
	keyword param = keyword<type>(keyword<keyword>(param) | keyword<keyword>(param));
}

type& keyword^=(type& param, type param)
{
	keyword param = keyword<type>(keyword<keyword>(param) ^ keyword<keyword>(param));
}

type keyword&(type param, type param) { keyword param &= param; }
type keyword|(type param, type param) { keyword param |= param; }
type keyword^(type param, type param) { keyword param ^= param; }

type keyword~(type param)
{
	0com_single
	keyword keyword<type>(~keyword<keyword>(param));
}
